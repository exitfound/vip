---
# Создание директории TLS для хранения сертификатов Consul:
- name: Create Vault Cluster directories on Debian family distro
  file:
    state: directory
    path: "{{ external_consul_manual_cluster_vault_tls_dir }}"
    mode: "{{ local_vault_manual_cluster_dir_mode }}"
    owner: "{{ local_vault_manual_cluster_user }}"
    group: "{{ local_vault_manual_cluster_group }}"
  when: global_vault_cluster_enable_consul_scheme | bool

- name: Finding a host from a group named consul
  set_fact:
    global_consul_cluster_inventory_group: "{{ item }}"
  loop: "{{ groups.keys() | list }}"
  when: groups[item] is defined and
        groups[item] | length > 0 and
        (groups[item] | select('match', 'consul.*') | list | length) > 0
  run_once: true

- name: Set fact with Consul CA paths from source host in Consul group
  set_fact:
    consul_source_ca_certificate: "{{ hostvars[groups[global_consul_cluster_inventory_group][0]]['global_system_internal_dir_ca'] ~ '/' ~ hostvars[groups[global_consul_cluster_inventory_group][0]]['global_system_internal_file_ca_certificate'] }}"
    consul_source_ca_private_key: "{{ hostvars[groups[global_consul_cluster_inventory_group][0]]['global_system_internal_dir_ca'] ~ '/' ~ hostvars[groups[global_consul_cluster_inventory_group][0]]['global_system_internal_file_ca_privatekey'] }}"
  run_once: true

- name: Get CA Certificate from Consul Node
  fetch:
    src: "{{ consul_source_ca_certificate }}"
    dest: "/tmp/{{ external_consul_manual_cluster_file_ca_certificate }}"
    flat: yes
  delegate_to: "{{ groups[global_consul_cluster_inventory_group][0] }}"
  run_once: true

- name: Distribute Consul CA to Vault Nodes
  copy:
    src: "/tmp/{{ external_consul_manual_cluster_file_ca_certificate }}"
    dest: "{{ global_system_internal_dir_node_certificates}}/{{ external_consul_manual_cluster_file_ca_certificate }}"
    group: "{{ global_system_internal_ca_key_group }}"
    owner: "{{ external_consul_manual_cluster_file_ca_node_value_owner }}"
    mode: "{{ external_consul_manual_cluster_file_ca_node_value_mode }}"

- name: Get CA Private Key from Consul Node
  fetch:
    src: "{{ consul_source_ca_private_key }}"
    dest: "/tmp/{{ external_consul_manual_cluster_file_ca_private_key }}"
    flat: yes
  delegate_to: "{{ groups[global_consul_cluster_inventory_group][0] }}"
  run_once: true

- name: Distribute Consul CA key to Vault nodes
  copy:
    src: /tmp/{{ external_consul_manual_cluster_file_ca_private_key }}
    dest: "{{ global_system_internal_dir_node_certificates}}/{{ external_consul_manual_cluster_file_ca_private_key }}"
    group: "{{ global_system_internal_ca_key_group }}"
    owner: "{{ external_consul_manual_cluster_file_ca_node_value_owner }}"
    mode: 0640

# Создание приватного ключа на каждом узле для последующего взаимодействия с Consul посредством использования TLS:
- name: Generate Private Key on each Node
  community.crypto.openssl_privatekey:
    path: "{{ global_system_internal_dir_node_certificates }}/{{ external_consul_manual_cluster_file_ca_node_value }}.key.pem"
    type: "{{ global_system_internal_privatekey_type }}"
    size: "{{ global_system_internal_privatekey_size }}"
    mode: "{{ external_consul_manual_cluster_file_ca_node_value_mode }}"
    owner: "{{ external_consul_manual_cluster_file_ca_node_value_owner }}"
    group: "{{ global_system_internal_ca_key_group }}"

# Создание CSR на каждом узле для последующего взаимодействия с Consul посредством использования TLS:
- name: Generate CSR on each Node
  community.crypto.openssl_csr:
    path: "{{ global_system_internal_dir_node_certificates }}/{{ external_consul_manual_cluster_file_ca_node_value }}.csr.pem"
    privatekey_path: "{{ global_system_internal_dir_node_certificates }}/{{ external_consul_manual_cluster_file_ca_node_value }}.key.pem"
    common_name: "{{ global_system_internal_csr_common_name }}"
    country_name: "{{ global_system_internal_csr_country_name }}"
    organization_name: "{{ global_system_internal_csr_organization_name }}"
    email_address: "admin@{{ external_consul_manual_cluster_file_ca_node_value }}"
    subject_alt_name: >-
      {{
        (
          global_system_internal_csr_san_dns | default([])
        )
        +
        [
          'IP:' ~ (hostvars[inventory_hostname]['ansible_default_ipv4']['address'] | default('127.0.0.1')),
          'DNS:' ~ (hostvars[inventory_hostname]['ansible_fqdn'] | default(inventory_hostname))
        ]
        +
        ['IP:127.0.0.1']
        +
        ['DNS:localhost']
      }}
    use_common_name_for_san: false
    create_subject_key_identifier: true

# Выпуск сертификатов для каждого узла на базе CA Consul, который был получен ранее:
- name: Sign each Node certificate file
  community.crypto.x509_certificate:
    path: "{{ global_system_internal_dir_node_certificates }}/{{ external_consul_manual_cluster_file_ca_node_value }}.crt.pem"
    csr_path: "{{ global_system_internal_dir_node_certificates }}/{{ external_consul_manual_cluster_file_ca_node_value }}.csr.pem"
    provider: ownca
    ownca_path: "{{ global_system_internal_dir_node_certificates }}/{{ external_consul_manual_cluster_file_ca_certificate }}"
    ownca_privatekey_path: "{{ global_system_internal_dir_node_certificates }}/{{ external_consul_manual_cluster_file_ca_private_key }}"
    ownca_not_before: "-1d"
    ownca_not_after: "+365d"
    ownca_create_authority_key_identifier: true
    ownca_create_subject_key_identifier: "create_if_not_provided"

# Переназначение прав для всех созданных файлов в директории TLS:
- name: Set ownership and permissions on TLS directory
  file:
    path: "{{ global_system_internal_dir_node_certificates }}"
    owner: "{{ external_consul_manual_cluster_file_ca_node_value_owner }}"
    group: "{{ global_system_internal_ca_key_group }}"
    recurse: true
