---
# Создание группы с именем Vault для назначения прав:
- name: Create Vault group on SUSE family distro
  group:
    name: "{{ local_system_internal_ca_key_group }}"
    state: present
    gid: 452

# Создание директорий для последующей работы роли:
- name: Ensure CA directories exists on Delegate Host
  file:
    state: directory
    path: "{{ item.path }}"
    mode: "{{ local_system_internal_dir_mode }}"
    owner: "{{ local_system_internal_ca_key_owner }}"
    group: "{{ local_system_internal_ca_key_group }}"
  loop:
    - {path: "{{ global_vault_system_internal_dir_ca }}"}
    - {path: "{{ local_system_internal_dir_temporary }}"}
  delegate_to: "{{ global_vault_system_internal_delegate_host }}"
  run_once: true

# Создание приватного ключа для CA на делегированном узле:
- name: Generate CA Private Key on Delegate Host
  community.crypto.openssl_privatekey:
    path: "{{ local_system_internal_file_ca_key_path }}"
    type: "{{ global_vault_system_internal_privatekey_type }}"
    size: "{{ global_vault_system_internal_privatekey_size }}"
    mode: "{{ local_system_internal_file_ca_key_mode }}"
    owner: "{{ local_system_internal_ca_key_owner }}"
    group: "{{ local_system_internal_ca_key_group }}"
  delegate_to: "{{ global_vault_system_internal_delegate_host }}"
  run_once: true

# Создание CSR для CA на делегированном узле:
- name: Create CA CSR on Delegate Host
  community.crypto.openssl_csr:
    privatekey_path: "{{ local_system_internal_file_ca_key_path }}"
    path: "{{ local_system_internal_file_ca_csr_path }}"
    basicConstraints: ["CA:TRUE"]
    basic_constraints_critical: true
    key_usage_critical: true
    key_usage:
      - keyCertSign
      - digitalSignature
      - cRLSign
    country_name: "{{ global_vault_system_internal_csr_country_name }}"
    common_name: "{{ global_vault_system_internal_csr_common_name }}"
    organization_name: "{{ global_vault_system_internal_csr_organization_name }}"
    email_address: "{{ global_vault_system_internal_csr_email_address }}"
    create_subject_key_identifier: true
    use_common_name_for_san: false
    # subject_alt_name:
    #   - "DNS:{{ ansible_fqdn | default(inventory_hostname) }}"
    #   - "IP:{{ ansible_default_ipv4.address }}"
    #   - "IP:127.0.0.1"
    # subject_alt_name: >-
    #   {{
    #     (
    #       global_vault_system_internal_csr_san_dns | default([])
    #     )
    #     +
    #     (
    #       groups[global_vault_raft_cluster_inventory_group | default('vault')]
    #       | map('extract', hostvars, ['ansible_default_ipv4', 'address'])
    #       | select('string')
    #       | map('regex_replace', '^', 'IP:')
    #       | list
    #     )
    #     +
    #     (
    #       groups[global_vault_raft_cluster_inventory_group | default('vault')]
    #       | map('regex_replace', '^', 'DNS:')
    #       | list
    #     )
    #     +
    #     ['IP:127.0.0.1']
    #     +
    #     ['DNS:localhost']
    #   }}
    subject_alt_name: >-
      {{
        (
          global_vault_system_internal_csr_san_dns | default([])
        )
        +
        [
          'IP:' ~ (hostvars[inventory_hostname]['ansible_default_ipv4']['address'] | default('127.0.0.1')),
          'DNS:' ~ (hostvars[inventory_hostname]['ansible_fqdn'] | default(inventory_hostname))
        ]
        +
        ['IP:127.0.0.1']
        +
        ['DNS:localhost']
      }}
  delegate_to: "{{ global_vault_system_internal_delegate_host }}"
  run_once: true

# Создание самоподписного сертификата для CA на делегированном узле:
- name: Generate CA certificate on Delegate Host (Self-signed)
  community.crypto.x509_certificate:
    provider: selfsigned
    selfsigned_digest: sha256
    selfsigned_not_before: "-1d"
    selfsigned_not_after: "+3650d"
    selfsigned_create_subject_key_identifier: create_if_not_provided
    path: "{{ local_system_internal_file_ca_cert_path }}"
    privatekey_path: "{{ local_system_internal_file_ca_key_path }}"
    csr_path: "{{ local_system_internal_file_ca_csr_path }}"
    mode: "{{ local_system_internal_file_ca_cert_mode }}"
    owner: "{{ local_system_internal_ca_key_owner }}"
    group: "{{ local_system_internal_ca_key_group }}"
  delegate_to: "{{ global_vault_system_internal_delegate_host }}"
  run_once: true

# Создание директории для хранения информации о ключах и сертификатах:
- name: Ensure certificate directory exists on each Node
  file:
    state: directory
    path: "{{ global_vault_system_internal_dir_node_certificates }}"
    mode: "{{ local_system_internal_dir_mode }}"
    owner: "{{ local_system_internal_ca_key_owner }}"
    group: "{{ local_system_internal_ca_key_group }}"

# Создание приватного ключа на каждом узле для последующего использования:
- name: Generate Private Key on each Node
  community.crypto.openssl_privatekey:
    path: "{{ global_vault_system_internal_dir_node_certificates }}/{{ inventory_hostname }}.key.pem"
    type: "{{ global_vault_system_internal_privatekey_type }}"
    size: "{{ global_vault_system_internal_privatekey_size }}"
    mode: "{{ local_system_internal_file_ca_key_mode }}"
    owner: "{{ local_system_internal_ca_key_owner }}"
    group: "{{ local_system_internal_ca_key_group }}"

# Создание CSR на каждом узле для последующего использования:
- name: Generate CSR on each Node
  community.crypto.openssl_csr:
    path: "{{ global_vault_system_internal_dir_node_certificates }}/{{ inventory_hostname }}.csr.pem"
    privatekey_path: "{{ global_vault_system_internal_dir_node_certificates }}/{{ inventory_hostname }}.key.pem"
    common_name: "{{ global_vault_system_internal_csr_common_name }}"
    country_name: "{{ global_vault_system_internal_csr_country_name }}"
    organization_name: "{{ global_vault_system_internal_csr_organization_name }}"
    email_address: "admin@{{ inventory_hostname }}"
    subject_alt_name: >-
      {{
        (
          global_vault_system_internal_csr_san_dns | default([])
        )
        +
        [
          'IP:' ~ (hostvars[inventory_hostname]['ansible_default_ipv4']['address'] | default('127.0.0.1')),
          'DNS:' ~ (hostvars[inventory_hostname]['ansible_fqdn'] | default(inventory_hostname))
        ]
        +
        ['IP:127.0.0.1']
        +
        ['DNS:localhost']
      }}
    use_common_name_for_san: false
    create_subject_key_identifier: true

# Считывание CSR файлов со всех узлов для их последующего копирования:
- name: Slurp CSR file from each Node
  slurp:
    src: "{{ global_vault_system_internal_dir_node_certificates }}/{{ inventory_hostname }}.csr.pem"
  register: csr_file_base64

# Копирование CSR файлов со всех узлов на делегированный узел, где был создан CA:
- name: Copy each Node CSR file to CA Delegate Host
  copy:
    content: "{{ csr_file_base64['content'] | b64decode }}.csr.pem"
    dest: "{{ local_system_internal_dir_temporary }}/{{ inventory_hostname }}.csr.pem"
    mode: "{{ local_system_internal_file_ca_cert_mode }}"
  delegate_to: "{{ global_vault_system_internal_delegate_host }}"

# Выпуск сертификатов для каждого узла на базе CA, который был создан ранее:
- name: Sign each Node certificate file on CA Delegate Host
  community.crypto.x509_certificate:
    path: "{{ local_system_internal_dir_temporary }}/{{ inventory_hostname }}.crt.pem"
    csr_path: "{{ local_system_internal_dir_temporary }}/{{ inventory_hostname }}.csr.pem"
    provider: ownca
    ownca_path: "{{ local_system_internal_file_ca_cert_path }}"
    ownca_privatekey_path: "{{ local_system_internal_file_ca_key_path }}"
    ownca_not_before: "-1d"
    ownca_not_after: "+365d"
    ownca_create_authority_key_identifier: true
    ownca_create_subject_key_identifier: "create_if_not_provided"
  delegate_to: "{{ global_vault_system_internal_delegate_host }}"

# Считывание всех сертификатов на делегированном узле для их последующего копирования:
- name: Slurp signed certificates from CA Delegate Host
  slurp:
    src: "{{ local_system_internal_dir_temporary }}/{{ inventory_hostname }}.crt.pem"
  register: crt_file_base64
  delegate_to: "{{ global_vault_system_internal_delegate_host }}"

# Копирование всех сертификатов с делегированного узла на все остальные узлы в группе:
- name: Copy signed certificates from CA Delegate Host to each Node
  copy:
    content: "{{ crt_file_base64.content | b64decode }}"
    dest: "{{ global_vault_system_internal_dir_node_certificates }}/{{ inventory_hostname }}.crt.pem"
    mode: "{{ local_system_internal_file_ca_cert_mode }}"

# Считывание CA сертификата на делегированном узле для его последующего копирования:
- name: Slurp CA certificate from CA Delegate Host
  slurp:
    src: "{{ local_system_internal_file_ca_cert_path }}"
  register: ca_crt_file_base64
  delegate_to: "{{ global_vault_system_internal_delegate_host }}"
  run_once: true

# Копирование CA сертификата с делегированного узла на все остальные узлы в группе:
- name: Copy CA certificate from CA Delegate Host to each Node
  copy:
    content: "{{ ca_crt_file_base64.content | b64decode }}"
    dest: "{{ global_vault_system_internal_dir_node_certificates }}/{{ global_vault_system_internal_file_ca_certificate }}"
    mode: "{{ local_system_internal_file_ca_cert_mode }}"

# Переназначение прав для всех созданных файлов в главной директории:
- name: Set ownership and permissions on TLS directory
  file:
    path: "{{ global_vault_system_internal_dir_node_certificates }}"
    owner: "{{ local_system_internal_ca_key_owner }}"
    group: "{{ local_system_internal_ca_key_group }}"
    recurse: true

# Вызов файла debian.yaml для настройки необходимых компонентов на дистрибутиве семейства Debian:
- name: Invocation of the debian.yaml task
  include_tasks: debian.yaml
  when: ansible_os_family == 'Debian'

# Вызов файла redhat.yaml для настройки необходимых компонентов на дистрибутиве семейства RedHat:
- name: Invocation of the redhat.yaml task
  include_tasks: redhat.yaml
  when: ansible_os_family == 'RedHat'

# Вызов файла redhat.yaml для настройки необходимых компонентов на дистрибутиве семейства SUSE:
- name: Invocation of the suse.yaml task
  include_tasks: suse.yaml
  when: ansible_os_family == 'Suse'
